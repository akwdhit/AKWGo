// Code generated by MockGen. DO NOT EDIT.
// Source: filehandler.go

// Package filehandler is a generated GoMock package.
package filehandler

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileHandler is a mock of FileHandler interface
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// PrintToFile mocks base method
func (m *MockFileHandler) PrintToFile(content string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintToFile", content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PrintToFile indicates an expected call of PrintToFile
func (mr *MockFileHandlerMockRecorder) PrintToFile(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintToFile", reflect.TypeOf((*MockFileHandler)(nil).PrintToFile), content)
}

// PrintToJSONFile mocks base method
func (m *MockFileHandler) PrintToJSONFile(content interface{}) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintToJSONFile", content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PrintToJSONFile indicates an expected call of PrintToJSONFile
func (mr *MockFileHandlerMockRecorder) PrintToJSONFile(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintToJSONFile", reflect.TypeOf((*MockFileHandler)(nil).PrintToJSONFile), content)
}
